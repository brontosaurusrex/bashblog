#!/bin/bash

# extremly simple noname bash blog generator

# The idea here is that older posts are in htm files with lower numbers, like
# oldest n posts will be in 0.htm

# The leftovers are in the latest htm.file, so that older stuff will:
# a. keep the url structure (unless you insert something)
# b. only the latest posts will have to be generated (unless you insert something) 
# ^ a wish at least

shopt -s nullglob # see http://mywiki.wooledge.org/NullGlob

# config
n=7          # number of posts per file/page
min=5        # min posts allowed for first page


# check config
if (( min > n )) ; then
echo "config error, min must be smaller or equal to n" ; exit
fi

# input arguments to array
# if there were no arguments passed, try to glob *.md, if after
# all that array is still empty, exit with some message

posts=("$@") ; (($#)) || posts=(*.md) ; ((${#posts[@]})) || { echo >&2 "noone here? exiting..." ; exit 1; }          
# ^ this globs should skip empty/null-size files  

echo "${posts[*]}"                                                            

all="${#posts[@]}"
echo "$all is the number of the posts" 

### math start
# if all <= n, the we end everything here and set #fullloops to 1 and #postsinlastloop to 0

fullloops=$((all / n))                       # a start value for $fullloops

    if (( n >= all )) ; then 
    fullloops=0
    postsinlastloop=all
    echo "single loop, we end here"
    
    else
    remainder=$((all % n))
    echo "remainder = $remainder"            # if remainder < min then fullloops=fullloops-1
        if (( remainder < min )); then       # some sort of fancy loop would be needed here
        echo "remainder is to small"         # if we are to allow cases where min > n 
        fullloops=$((fullloops - 1))
        postsinlastloop=$((remainder + n))
        
        else # remainder is ok
        echo "remainder probably ok"
        postsinlastloop=remainder
        fi

    fi

echo "..............................."
echo "fullloops = $fullloops"
echo "postsinlastloop = $postsinlastloop"
### math end





cat header > "search-index.htm" ## this must happen just once at start


# all pages, but index 

# determine how many posts we need here

hereposts=$((fullloops * n))
echo "$hereposts hereposts" ; echo

for ((i=0; i < hereposts; i+=n)); do

    echo "$i.htm"
    echo "header" # header html
    
      cat header > "$i.htm" ##

    thisloop=( "${posts[@]:i:n}" )


        
    # navigation here
      printf '<h1>' >> "$i.htm" ## navigation start tag
    
    if ((i != 0)) ; then # math bug was here

    echo -n "<" $(( i - n)) 
    
      printf '<a href="%s.htm">&lt; </a>' "$(( i - n ))" >> "$i.htm" ##
    

    
    
    fi
    

    if ((i != all - postsinlastloop - n)) ; then 
      
    echo " >" $(( i + n))
    
      printf '<a href="%s.htm"> &gt;</a>' "$(( i + n ))" >> "$i.htm" ##
                
    else
    echo " > index";                     # if we are at the last batch
                                       # then link to index

      printf '<a href="index.htm"> &gt;</a>' >> "$i.htm" ##
    
    fi
    
      printf '</h1>' >> "$i.htm" ## navigation end tag
    # end navigation here
    


        # each post
        echo "${#thisloop[@]} posts in this file" # debug

        for ((b=${#thisloop[@]}-1; b>=0; b--)); do    # reverse loop over array
            if ((b != n -1)) ; then                   # skip divider before first post
            echo "----------------divider"            # divider html
            cat divider >> "$i.htm" ##
            fi
            echo "   ${thisloop[b]}"                  # echo each member
                        
              printf '<h1 id="%s"><a href="#%s">%s</a></h1>' "${thisloop[b]}"{,,,}  >> "$i.htm" ## post title comes from filename
              pandoc "${thisloop[b]}" >> "$i.htm" ##
              
              # and do something for search-index.htm here
              printf '\n<h1><a href="%s#%s">%s</a></h1>' "$i.htm" "${thisloop[b]}" "${thisloop[b]}" >> "search-index.htm" 
              pandoc "${thisloop[b]}" -t plain |  tr ' ' '\n' | grep -i -v -w -f stopwords | cat -n | sort -uk2 | sort -nk1 | cut -f2- | tr '\n' ' ' | tr -cd '[:alnum:] ' | head -c 10000 >> "search-index.htm"
              # end do something for search-index.htm here
        done


    echo "footer" ; echo ; echo # footer html 
    
    cat footer >> "$i.htm" ##

done


# last posts here into page index.htm

# echo "postsleft for index.htm = $postsinlastloop" ; echo


    echo "index.htm"
    echo "header" # header html
    
    cat header > "index.htm" ##

    thisloop=( "${posts[@]:i:postsinlastloop}" )
    
    # navigation here
    
    if ((fullloops != 0)) ; then
    printf '<h1>' >> "index.htm" ## navigation start tag
    echo "< " $(( i - n))
    

    printf '<a href="%s.htm">&lt</a>' "$(( i - n ))" >> "index.htm" ##
    printf '</h1>' >> "index.htm" ## navigation end tag
    fi
    
    
        # each post
        echo "${#thisloop[@]} posts in this file" # debug

        for ((b=${#thisloop[@]}-1; b>=0; b--)); do    # reverse loop over array
            if ((b != postsinlastloop -1)) ; then # skip divider before first post
            echo "----------------divider" # divider html
            cat divider >> "index.htm" ##
            fi
            echo "   ${thisloop[b]}"  # echo each member

            printf '<h1 id="%s"><a href="#%s">%s</a></h1>' "${thisloop[b]}"{,,,}  >> "index.htm" ## post title comes from filename
            pandoc "${thisloop[b]}" >> "index.htm" ##
            
              # and do something for search-index.htm here
              printf '\n<h1><a href="%s#%s">%s</a></h1>' "index.htm" "${thisloop[b]}" "${thisloop[b]}" >> "search-index.htm" 
              pandoc "${thisloop[b]}" -t plain |  tr ' ' '\n' | grep -i -v -w -f stopwords | cat -n | sort -uk2 | sort -nk1 | cut -f2- | tr '\n' ' ' | tr -cd '[:alnum:] ' | head -c 10000 >> "search-index.htm"
              # end do something for search-index.htm here
            
        done

            

    echo "footer" ; echo ; echo # footer html 
    
    cat footer >> "index.htm" ##
    
# end last posts here into index.htm




cat footer >> "search-index.htm" ## this must happen just once at end




















# notes

# { echo a ; echo b ; echo c ; } > file
# printf '<a href="%s.htm">&gt;&gt;&gt;&gt;&gt;</a>' "$(( expr ))"


# extremly cool but slow filter for search-index
# pandoc file.md -t plain | tr -cd '[:alnum:] ' | tr -s ' ' | tr [:upper:] [:lower:] | tr ' ' '\n' | grep -i -v -w -f stopwords | sort -u | tr '\n' ' ' | head -c 1000

# an even cooler / faster
# pandoc file.md -t plain | tr -cd '[:alnum:] ' | tr -s ' ' | tr ' ' '\n' | sort -fu | grep -i -v -w -f stopwords | tr '\n' ' ' | head -c 5000

# with stemmer, this does not work as one would expect
# pandoc file.md -t plain | tr -cd '[:alnum:] ' | tr -s ' ' | tr ' ' '\n' | stemwords | sort -fu | grep -i -v -w -f stopwords | tr '\n' ' '

# and with some randomness (shuf), good
# pandoc gpl.md -t plain | tr -cd '[:alnum:] ' | tr -s ' ' | tr ' ' '\n' | stemwords | sort -fu | grep -i -v -w -f stopwords | shuf | tr '\n' ' ' | head -c 2000

# and some actually usefull one, with spaces in correct places and in order-of-apperance
# pandoc gpl.md -t plain |  tr ' ' '\n' | grep -i -v -w -f stopwords | tr '\n' ' ' | tr -cd '[:alnum:] ' | head -c 3000

# and the one that removes duplicates, but keeps general order of appearance: cat -n | sort -uk2 | sort -nk1 | cut -f2-
# pandoc 01_install.md -t plain |  tr ' ' '\n' | grep -i -v -w -f stopwords | cat -n | sort -uk2 | sort -nk1 | cut -f2- | tr '\n' ' ' | tr -cd '[:alnum:] ' | head -c 3000
